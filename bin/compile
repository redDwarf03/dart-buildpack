#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit
set -o pipefail
set -o nounset

if [ -n "${BUILDPACK_DEBUG:-}" ]; then
    set -x
fi

unset GIT_DIR

[ "${BUILDPACK_XTRACE:-}" ] && set -o xtrace

### Constants
BPLOG_PREFIX="buildpack.dart"
DART_MIN_VERSION="2.12.0"
MAX_CACHE_SIZE_MB=500

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies
source "$BP_DIR/lib/vendor/stdlib_v7.sh"
source "$BP_DIR/lib/output.sh"
source "$BP_DIR/lib/monitor.sh"
source "$BP_DIR/lib/environment.sh"
source "$BP_DIR/lib/features.sh"
source "$BP_DIR/lib/dart.sh"
source "$BP_DIR/lib/failure.sh"
source "$BP_DIR/lib/cache.sh"
source "$BP_DIR/lib/builddata.sh"
source "$BP_DIR/lib/dependencies.sh"
source "$BP_DIR/lib/uuid.sh"
source "$BP_DIR/lib/kvstore.sh"
source "$BP_DIR/lib/metadata.sh"

### Enhanced error handling
handle_failure() {
  meta_set "dart-build-success" "false"
  
  header "Build failure analysis" | output "$LOG_FILE"
  log_other_failures "$LOG_FILE"  
  
  # Extended Diagnostic
  echo "=== Environment ===" | output "$LOG_FILE"
  env | sort | output "$LOG_FILE"
  
  failure_message | output "$LOG_FILE"
  log_meta_data >> "$BUILDPACK_LOG_FILE"
  
  exit 1 
}

trap 'handle_failure' ERR

### Initialize metadata and build environment
meta_init "$CACHE_DIR"
meta_setup
meta_set "build-step" "init"

### Check initial state
[ -e "$BUILD_DIR/.dart_tool" ] && PREBUILD=true || PREBUILD=false
[ -f "$BUILD_DIR/pubspec.yaml" ] && PUBSPEC=true || PUBSPEC=false

### Security check


fail_dot_scalingo "$BUILD_DIR"
fail_dot_scalingo_node "$BUILD_DIR"
fail_invalid_pubspec
warn_missing_pubspec


### Project analysis
log_project_info "$BUILD_DIR"
generate_uuids

### Environment setup
create_env() {
  export_env_dir "$ENV_DIR"
  
  # Clean sensitive variables
  unset $(env | grep -i 'SECRET\|KEY\|PASSWORD\|TOKEN' | cut -d= -f1)
  
  create_default_env
  write_profile "$BP_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  
  # Set production mode by default
  export DART_ENV=${DART_ENV:-production}
}

header "Configuring environment" | output "$LOG_FILE"
mkdir -p "$BUILD_DIR/.scalingo/dart/"
cd "$BUILD_DIR"
create_env
list_dart_config | output "$LOG_FILE"

### Dart SDK Configuration
header "Verifying Dart SDK" | output "$LOG_FILE"

dart_version=$(get_dart_version)
if ! check_version "$dart_version" "$DART_MIN_VERSION"; then
  error "Dart $DART_MIN_VERSION or higher required (found $dart_version)"
  exit 1
fi

meta_set "dart-version" "$dart_version"
echo "Using Dart $dart_version" | output "$LOG_FILE"

### Cache Management
purge_large_cache() {
  if [ -d "$CACHE_DIR/dart" ]; then
    local size_mb=$(du -sm "$CACHE_DIR/dart" | cut -f1)
    if [ "$size_mb" -gt "$MAX_CACHE_SIZE_MB" ]; then
      warning "Purging oversized cache (${size_mb}MB > ${MAX_CACHE_SIZE_MB}MB)"
      rm -rf "$CACHE_DIR/dart"
    fi
  fi
}

restore_cache() {
  purge_large_cache
  
  local cache_status=$(get_cache_status "$CACHE_DIR")
  meta_set "cache-status" "$cache_status"
  
  case "$cache_status" in
    "valid")
      header "Restoring cache" | output "$LOG_FILE"
      restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
      ;;
    "new-signature")
      warning "Cache invalidated (signature changed)"
      ;;
    *)
      warning "No valid cache found"
      ;;
  esac
}

### Dependency Installation
build_dependencies() {
  header "Installing dependencies" | output "$LOG_FILE"
  
  monitor "pub-get" dart_pub_get "$BUILD_DIR"
  
  # Security audit
  if dart pub upgrade --dry-run --security-checks | grep -q "vulnerable"; then
    warning "Some dependencies have known vulnerabilities!"
    meta_set "dart-vulnerabilities" "true"
  fi
  
  # Verify dependencies
  if ! dart pub outdated --mode=null-safety; then
    warning "Some dependencies may not be null-safe"
  fi
}

### Build Process
meta_set "build-step" "restore-cache"
restore_cache | output "$LOG_FILE"

meta_set "build-step" "install-dependencies"
build_dependencies | output "$LOG_FILE"

### Final Cache Storage
cache_build() {
  header "Caching build artifacts" | output "$LOG_FILE"
  
  save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR"
  save_signature "$CACHE_DIR"
  
  log_cache_stats "$CACHE_DIR" | output "$LOG_FILE"
}

meta_set "build-step" "save-cache"
cache_build | output "$LOG_FILE"

### Build Summary
summarize_build() {
  header "Build succeeded! ðŸŽ¯" | output "$LOG_FILE"
  
  echo "=== Build Summary ===" | output "$LOG_FILE"
  echo "Dart Version: $(dart --version 2>&1)" | output "$LOG_FILE"
  echo "Cache Size: $(du -sh "$CACHE_DIR/dart" 2>/dev/null || echo 'N/A')" | output "$LOG_FILE"
  echo "Dependencies: $(dart pub list | wc -l) packages" | output "$LOG_FILE"
  
  mmeasure 'modules.size' "$(measure_size)"
  meta_set "dart-modules-size" "$(measure_size)"
}

meta_set "build-step" "summarize"
summarize_build | output "$LOG_FILE"

meta_set "dart-build-success" "true"
log_meta_data >> "$BUILDPACK_LOG_FILE"